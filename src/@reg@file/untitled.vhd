-- hds header_start
--
-- VHDL Architecture MP1.RegFile.untitled
--
-- Created:
--          by - ykim29.stdt (eesn11.ews.uiuc.edu)
--          at - 18:17:38 09/08/04
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;


LIBRARY MP2_2;
USE MP2_2.LC3b_types.all;

ENTITY RegFile IS
   PORT( 
      RESET_L     : IN     std_logic;
      RFMuxout    : IN     LC3b_word;
      RegDest     : IN     LC3b_reg;
      RegWrite    : IN     std_logic;
      SrcB        : IN     LC3b_reg;
      StoreMuxout : IN     LC3b_reg;
      clk         : IN     std_logic;
      RFAout      : OUT    LC3b_word;
      rfbout      : OUT    LC3b_word
   );

-- Declarations

END RegFile ;

-- hds interface_end

ARCHITECTURE untitled OF RegFile IS
  type rammemory is array (7 downto 0) of LC3b_word;
  signal ram : rammemory;
BEGIN
   -------------------------------------------------------------------
  vhdl_regfile_read : PROCESS (ram, StoreMuxout, SrcB)
  -------------------------------------------------------------------
  variable raddr1 : integer range 0 to 7;
  variable raddr2 : integer range 0 to 7;
  BEGIN
    -- Read regfile Process.
    -- convert addresses to integers to use as an index into the array.
    raddr1 := to_Integer(unsigned('0' & StoreMuxout));
    raddr2 := to_Integer(unsigned('0' & SrcB));
    RFAout <= ram(raddr1) after delay_regfile_read;
    RFBout <= ram(raddr2) after delay_regfile_read;
  END PROCESS vhdl_regfile_read;

  -------------------------------------------------------------------
  vhdl_regfile_write: process(clk, RFMuxout, RegWrite, RegDest, RESET_L)
  -------------------------------------------------------------------
  variable waddr : integer range 0 to 7;
  BEGIN
    if (RESET_L = '0') then
      ram(0) <= "0000000000000000";
      ram(1) <= "0000000000000000";
      ram(2) <= "0000000000000000";
      ram(3) <= "0000000000000000";
      ram(4) <= "0000000000000000";
      ram(5) <= "0000000000000000";
      ram(6) <= "0000000000000000";
      ram(7) <= "0000000000000000";
    end if;
    -- convert address to integer
    waddr := to_Integer(unsigned('0' & RegDest));
    if (clk'event and (clk = '1') and (clk'last_value = '0')) then
      if (RegWrite = '1') then
        ram(waddr) <= RFMuxout;
      end if;
    end if;
  END PROCESS vhdl_regfile_write;

END untitled;
