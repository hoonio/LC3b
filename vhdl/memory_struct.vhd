-- hds header_start
--
-- VHDL Entity MP2_2.Memory.interface
--
-- Created:
--          by - skim41.stdt (eesn21.ews.uiuc.edu)
--          at - 15:37:34 10/18/04
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

LIBRARY MP2_2;
USE MP2_2.LC3b_types.all;

ENTITY Memory IS
   PORT( 
      ADDRESS   : IN     LC3b_word;
      DATAOUT   : IN     LC3b_word;
      MREAD_L   : IN     std_logic;
      MWRITEH_L : IN     std_logic;
      MWRITEL_L : IN     std_logic;
      RESET_L   : IN     std_logic;
      clk       : IN     std_logic;
      DATAIN    : OUT    LC3b_word;
      MRESP_H   : OUT    std_logic
   );

-- Declarations

END Memory ;

-- hds interface_end
--
-- VHDL Architecture MP2_2.Memory.struct
--
-- Created:
--          by - skim41.stdt (eesn21.ews.uiuc.edu)
--          at - 15:37:35 10/18/04
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;


LIBRARY MP2_2;
USE MP2_2.LC3b_types.all;

LIBRARY MP2_2;

ARCHITECTURE struct OF Memory IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL CacheLine0    : LC3b_CacheLine64;
   SIGNAL Cacheline1    : LC3b_CacheLine64;
   SIGNAL Comp_Out1     : std_logic;
   SIGNAL Comp_Out2     : std_logic;
   SIGNAL Data_cacheout : LC3b_CacheLine64;
   SIGNAL Data_wordout  : LC3b_word;
   SIGNAL LineSel       : std_logic;
   SIGNAL PMAddress     : LC3b_word;
   SIGNAL PMDataIn      : LC3b_CacheLine64;
   SIGNAL PMDataOut     : LC3b_CacheLine64;
   SIGNAL PMREAD_L      : std_logic;
   SIGNAL PMRESP_H      : std_logic;
   SIGNAL PMWRITE_L     : std_logic;
   SIGNAL Valid0        : std_logic;
   SIGNAL Valid1        : std_logic;
   SIGNAL WriteEn0      : std_logic;
   SIGNAL WriteEn1      : std_logic;
   SIGNAL index         : LC3b_index4;
   SIGNAL lruload       : std_logic;
   SIGNAL lrusel        : std_logic;
   SIGNAL lruupdate     : std_logic;
   SIGNAL offset        : LC3b_offset3;
   SIGNAL tag           : LC3b_tag9;
   SIGNAL tag0_out      : LC3b_tag9;
   SIGNAL tag0match     : std_logic;
   SIGNAL tag1_out      : LC3b_tag9;
   SIGNAL tag1match     : std_logic;


   -- Component Declarations
   COMPONENT AND1
   PORT (
      Clk       : IN     std_logic ;
      Comp_Out1 : IN     std_logic ;
      Valid0    : IN     std_logic ;
      tag0match : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      Clk       : IN     std_logic ;
      Comp_Out2 : IN     std_logic ;
      Valid1    : IN     std_logic ;
      tag1match : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Cache_Controller
   PORT (
      Address       : IN     LC3b_word ;
      Clk           : IN     std_logic ;
      Data_cacheout : IN     LC3b_CacheLine64 ;
      Data_wordout  : IN     LC3b_word ;
      Dataout       : IN     LC3b_word ;
      MREAD_L       : IN     std_logic ;
      MWRITEH_L     : IN     std_logic ;
      MWRITEL_L     : IN     std_logic ;
      PMRESP_H      : IN     std_logic ;
      Reset_L       : IN     std_logic ;
      lrusel        : IN     std_logic ;
      tag0match     : IN     std_logic ;
      tag1match     : IN     std_logic ;
      DataIn        : OUT    LC3b_word ;
      LineSel       : OUT    std_logic ;
      MRESP_H       : OUT    std_logic ;
      PMAddress     : OUT    LC3b_word ;
      PMDataOut     : OUT    LC3b_CacheLine64 ;
      PMREAD_L      : OUT    std_logic ;
      PMWRITE_L     : OUT    std_logic ;
      WriteEn0      : OUT    std_logic ;
      WriteEn1      : OUT    std_logic ;
      index         : OUT    LC3b_index4 ;
      lruload       : OUT    std_logic ;
      lruupdate     : OUT    std_logic ;
      offset        : OUT    LC3b_offset3 ;
      tag           : OUT    LC3b_tag9 
   );
   END COMPONENT;
   COMPONENT Comparator1
   PORT (
      Clk       : IN     std_logic ;
      tag       : IN     LC3b_tag9 ;
      tag0_out  : IN     LC3b_tag9 ;
      Comp_Out1 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Comparator2
   PORT (
      Clk       : IN     std_logic ;
      tag       : IN     LC3b_tag9 ;
      tag1_out  : IN     LC3b_tag9 ;
      Comp_Out2 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DRAM
   PORT (
      Clk       : IN     std_logic ;
      PMAddress : IN     LC3b_word ;
      PMDataOut : IN     LC3b_CacheLine64 ;
      PMREAD_L  : IN     std_logic ;
      PMWRITE_L : IN     std_logic ;
      Reset_L   : IN     std_logic ;
      PMDataIn  : OUT    LC3b_CacheLine64 ;
      PMRESP_H  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Data0
   PORT (
      Clk        : IN     std_logic ;
      PMDataIn   : IN     LC3b_CacheLine64 ;
      WriteEn0   : IN     std_logic ;
      index      : IN     LC3b_index4 ;
      CacheLine0 : OUT    LC3b_CacheLine64 
   );
   END COMPONENT;
   COMPONENT Data1
   PORT (
      Clk        : IN     std_logic ;
      PMDataIn   : IN     LC3b_CacheLine64 ;
      WriteEn1   : IN     std_logic ;
      index      : IN     LC3b_index4 ;
      Cacheline1 : OUT    LC3b_CacheLine64 
   );
   END COMPONENT;
   COMPONENT LRU_bit
   PORT (
      Clk       : IN     std_logic ;
      index     : IN     LC3b_index4 ;
      lrusel    : OUT    std_logic ;
      Reset_L   : IN     std_logic ;
      lruupdate : IN     std_logic ;
      lruload   : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT Mux_2
   PORT (
      CacheLine0    : IN     LC3b_CacheLine64 ;
      Cacheline1    : IN     LC3b_CacheLine64 ;
      Clk           : IN     std_logic ;
      LineSel       : IN     std_logic ;
      Data_cacheout : OUT    LC3b_CacheLine64 
   );
   END COMPONENT;
   COMPONENT Mux_4
   PORT (
      Clk           : IN     std_logic ;
      Data_cacheout : IN     LC3b_CacheLine64 ;
      offset        : IN     LC3b_offset3 ;
      Data_wordout  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Valid_bit0
   PORT (
      Clk      : IN     std_logic ;
      Reset_L  : IN     std_logic ;
      WriteEn0 : IN     std_logic ;
      index    : IN     LC3b_index4 ;
      Valid0   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Valid_bit1
   PORT (
      Clk      : IN     std_logic ;
      Reset_L  : IN     std_logic ;
      WriteEn1 : IN     std_logic ;
      index    : IN     LC3b_index4 ;
      Valid1   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT tag0
   PORT (
      Clk      : IN     std_logic ;
      WriteEn0 : IN     std_logic ;
      index    : IN     LC3b_index4 ;
      tag      : IN     LC3b_tag9 ;
      tag0_out : OUT    LC3b_tag9 
   );
   END COMPONENT;
   COMPONENT tag1
   PORT (
      Clk      : IN     std_logic ;
      WriteEn1 : IN     std_logic ;
      index    : IN     LC3b_index4 ;
      tag      : IN     LC3b_tag9 ;
      tag1_out : OUT    LC3b_tag9 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND1 USE ENTITY MP2_2.AND1;
   FOR ALL : AND2 USE ENTITY MP2_2.AND2;
   FOR ALL : Cache_Controller USE ENTITY MP2_2.Cache_Controller;
   FOR ALL : Comparator1 USE ENTITY MP2_2.Comparator1;
   FOR ALL : Comparator2 USE ENTITY MP2_2.Comparator2;
   FOR ALL : DRAM USE ENTITY MP2_2.DRAM;
   FOR ALL : Data0 USE ENTITY MP2_2.Data0;
   FOR ALL : Data1 USE ENTITY MP2_2.Data1;
   FOR ALL : LRU_bit USE ENTITY MP2_2.LRU_bit;
   FOR ALL : Mux_2 USE ENTITY MP2_2.Mux_2;
   FOR ALL : Mux_4 USE ENTITY MP2_2.Mux_4;
   FOR ALL : Valid_bit0 USE ENTITY MP2_2.Valid_bit0;
   FOR ALL : Valid_bit1 USE ENTITY MP2_2.Valid_bit1;
   FOR ALL : tag0 USE ENTITY MP2_2.tag0;
   FOR ALL : tag1 USE ENTITY MP2_2.tag1;
   -- pragma synthesis_on


BEGIN
   -- Instance port mappings.
   I14 : AND1
      PORT MAP (
         Clk       => Clk,
         Comp_Out1 => Comp_Out1,
         Valid0    => Valid0,
         tag0match => tag0match
      );
   I15 : AND2
      PORT MAP (
         Clk       => Clk,
         Comp_Out2 => Comp_Out2,
         Valid1    => Valid1,
         tag1match => tag1match
      );
   I0 : Cache_Controller
      PORT MAP (
         Address       => Address,
         Clk           => Clk,
         Data_cacheout => Data_cacheout,
         Data_wordout  => Data_wordout,
         Dataout       => Dataout,
         MREAD_L       => MREAD_L,
         MWRITEH_L     => MWRITEH_L,
         MWRITEL_L     => MWRITEL_L,
         PMRESP_H      => PMRESP_H,
         Reset_L       => Reset_L,
         lrusel        => lrusel,
         tag0match     => tag0match,
         tag1match     => tag1match,
         DataIn        => DataIn,
         LineSel       => LineSel,
         MRESP_H       => MRESP_H,
         PMAddress     => PMAddress,
         PMDataOut     => PMDataOut,
         PMREAD_L      => PMREAD_L,
         PMWRITE_L     => PMWRITE_L,
         WriteEn0      => WriteEn0,
         WriteEn1      => WriteEn1,
         index         => index,
         lruload       => lruload,
         lruupdate     => lruupdate,
         offset        => offset,
         tag           => tag
      );
   I4 : Comparator1
      PORT MAP (
         Clk       => Clk,
         tag       => tag,
         tag0_out  => tag0_out,
         Comp_Out1 => Comp_Out1
      );
   I5 : Comparator2
      PORT MAP (
         Clk       => Clk,
         tag       => tag,
         tag1_out  => tag1_out,
         Comp_Out2 => Comp_Out2
      );
   I10 : DRAM
      PORT MAP (
         Clk       => Clk,
         PMAddress => PMAddress,
         PMDataOut => PMDataOut,
         PMREAD_L  => PMREAD_L,
         PMWRITE_L => PMWRITE_L,
         Reset_L   => Reset_L,
         PMDataIn  => PMDataIn,
         PMRESP_H  => PMRESP_H
      );
   I3 : Data0
      PORT MAP (
         Clk        => Clk,
         PMDataIn   => PMDataIn,
         WriteEn0   => WriteEn0,
         index      => index,
         CacheLine0 => CacheLine0
      );
   I6 : Data1
      PORT MAP (
         Clk        => Clk,
         PMDataIn   => PMDataIn,
         WriteEn1   => WriteEn1,
         index      => index,
         Cacheline1 => Cacheline1
      );
   I7 : LRU_bit
      PORT MAP (
         Clk       => Clk,
         index     => index,
         lrusel    => lrusel,
         Reset_L   => Reset_L,
         lruupdate => lruupdate,
         lruload   => lruload
      );
   I9 : Mux_2
      PORT MAP (
         CacheLine0    => CacheLine0,
         Cacheline1    => Cacheline1,
         Clk           => Clk,
         LineSel       => LineSel,
         Data_cacheout => Data_cacheout
      );
   I11 : Mux_4
      PORT MAP (
         Clk           => Clk,
         Data_cacheout => Data_cacheout,
         offset        => offset,
         Data_wordout  => Data_wordout
      );
   I8 : Valid_bit0
      PORT MAP (
         Clk      => Clk,
         Reset_L  => Reset_L,
         WriteEn0 => WriteEn0,
         index    => index,
         Valid0   => Valid0
      );
   I12 : Valid_bit1
      PORT MAP (
         Clk      => Clk,
         Reset_L  => Reset_L,
         WriteEn1 => WriteEn1,
         index    => index,
         Valid1   => Valid1
      );
   I1 : tag0
      PORT MAP (
         Clk      => Clk,
         WriteEn0 => WriteEn0,
         index    => index,
         tag      => tag,
         tag0_out => tag0_out
      );
   I2 : tag1
      PORT MAP (
         Clk      => Clk,
         WriteEn1 => WriteEn1,
         index    => index,
         tag      => tag,
         tag1_out => tag1_out
      );

END struct;
