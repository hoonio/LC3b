-- hds header_start
--
-- VHDL Entity MP2_2.CPU.symbol
--
-- Created:
--          by - skim41.stdt (eesn6.ews.uiuc.edu)
--          at - 21:15:22 10/17/04
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

LIBRARY MP2_2;
USE MP2_2.LC3b_types.all;

ENTITY CPU IS
   PORT( 
      RESET_L : IN     std_logic;
      START_H : IN     std_logic;
      clk     : IN     std_logic
   );

-- Declarations

END CPU ;

-- hds interface_end
--
-- VHDL Architecture MP2_2.CPU.struct
--
-- Created:
--          by - skim41.stdt (eesn6.ews.uiuc.edu)
--          at - 21:15:23 10/17/04
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

LIBRARY MP2_2;
USE MP2_2.LC3b_types.all;

LIBRARY MP2_2;

ARCHITECTURE struct OF CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS   : LC3b_word;
   SIGNAL ALUMuxSel : std_logic;
   SIGNAL ALUop     : LC3b_aluop;
   SIGNAL CheckN    : std_logic;
   SIGNAL CheckP    : std_logic;
   SIGNAL CheckZ    : std_logic;
   SIGNAL DATAIN    : LC3b_word;
   SIGNAL DATAOUT   : LC3b_word;
   SIGNAL LoadIR    : std_logic;
   SIGNAL LoadMAR   : std_logic;
   SIGNAL LoadMDR   : std_logic;
   SIGNAL LoadNZP   : std_logic;
   SIGNAL LoadPC    : std_logic;
   SIGNAL MARMuxSel : std_logic_vector(1 DOWNTO 0);
   SIGNAL MDRMuxSel : std_logic;
   SIGNAL MREAD_L   : std_logic;
   SIGNAL MRESP_H   : std_logic;
   SIGNAL MWRITEH_L : std_logic;
   SIGNAL MWRITEL_L : std_logic;
   SIGNAL Opcode    : LC3b_opcode;
   SIGNAL PCMuxSel  : std_logic_vector(1 DOWNTO 0);
   SIGNAL RFMuxSel  : std_logic_vector(1 DOWNTO 0);
   SIGNAL RegWrite  : std_logic;
   SIGNAL StoreSR   : std_logic;
   SIGNAL bit11     : std_logic;
   SIGNAL n         : std_logic;
   SIGNAL p         : std_logic;
   SIGNAL z         : std_logic;


   -- Component Declarations
   COMPONENT Control
   PORT (
      CheckN    : IN     std_logic ;
      CheckP    : IN     std_logic ;
      CheckZ    : IN     std_logic ;
      MRESP_H   : IN     std_logic ;
      Opcode    : IN     LC3b_opcode ;
      RESET_L   : IN     std_logic ;
      START_H   : IN     std_logic ;
      bit11     : IN     std_logic ;
      clk       : IN     std_logic ;
      n         : IN     std_logic ;
      p         : IN     std_logic ;
      z         : IN     std_logic ;
      ALUMuxSel : OUT    std_logic ;
      ALUop     : OUT    LC3b_aluop ;
      LoadIR    : OUT    std_logic ;
      LoadMAR   : OUT    std_logic ;
      LoadMDR   : OUT    std_logic ;
      LoadNZP   : OUT    std_logic ;
      LoadPC    : OUT    std_logic ;
      MARMuxSel : OUT    std_logic_vector (1 DOWNTO 0);
      MDRMuxSel : OUT    std_logic ;
      MREAD_L   : OUT    std_logic ;
      MWRITEH_L : OUT    std_logic ;
      MWRITEL_L : OUT    std_logic ;
      PCMuxSel  : OUT    std_logic_vector (1 DOWNTO 0);
      RFMuxSel  : OUT    std_logic_vector (1 DOWNTO 0);
      RegWrite  : OUT    std_logic ;
      StoreSR   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Datapath
   PORT (
      ALUMuxSel : IN     std_logic ;
      ALUop     : IN     LC3b_aluop ;
      DATAIN    : IN     LC3b_word ;
      LoadIR    : IN     std_logic ;
      LoadMAR   : IN     std_logic ;
      LoadMDR   : IN     std_logic ;
      LoadNZP   : IN     std_logic ;
      LoadPC    : IN     std_logic ;
      MARMuxSel : IN     std_logic_vector (1 DOWNTO 0);
      MDRMuxSel : IN     std_logic ;
      PCMuxSel  : IN     std_logic_vector (1 DOWNTO 0);
      RESET_L   : IN     std_logic ;
      RFMuxSel  : IN     std_logic_vector (1 DOWNTO 0);
      RegWrite  : IN     std_logic ;
      StoreSR   : IN     std_logic ;
      clk       : IN     std_logic ;
      ADDRESS   : OUT    LC3b_word ;
      CheckN    : OUT    std_logic ;
      CheckP    : OUT    std_logic ;
      CheckZ    : OUT    std_logic ;
      DATAOUT   : OUT    LC3b_word ;
      Opcode    : OUT    LC3b_opcode ;
      bit11     : OUT    std_logic ;
      n         : OUT    std_logic ;
      p         : OUT    std_logic ;
      z         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Memory
   PORT (
      ADDRESS   : IN     LC3b_word ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      clk       : IN     std_logic ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Control USE ENTITY MP2_2.Control;
   FOR ALL : Datapath USE ENTITY MP2_2.Datapath;
   FOR ALL : Memory USE ENTITY MP2_2.Memory;
   -- pragma synthesis_on


BEGIN
   -- Instance port mappings.
   I0 : Control
      PORT MAP (
         CheckN    => CheckN,
         CheckP    => CheckP,
         CheckZ    => CheckZ,
         MRESP_H   => MRESP_H,
         Opcode    => Opcode,
         RESET_L   => RESET_L,
         START_H   => START_H,
         bit11     => bit11,
         clk       => clk,
         n         => n,
         p         => p,
         z         => z,
         ALUMuxSel => ALUMuxSel,
         ALUop     => ALUop,
         LoadIR    => LoadIR,
         LoadMAR   => LoadMAR,
         LoadMDR   => LoadMDR,
         LoadNZP   => LoadNZP,
         LoadPC    => LoadPC,
         MARMuxSel => MARMuxSel,
         MDRMuxSel => MDRMuxSel,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         PCMuxSel  => PCMuxSel,
         RFMuxSel  => RFMuxSel,
         RegWrite  => RegWrite,
         StoreSR   => StoreSR
      );
   I2 : Datapath
      PORT MAP (
         ALUMuxSel => ALUMuxSel,
         ALUop     => ALUop,
         DATAIN    => DATAIN,
         LoadIR    => LoadIR,
         LoadMAR   => LoadMAR,
         LoadMDR   => LoadMDR,
         LoadNZP   => LoadNZP,
         LoadPC    => LoadPC,
         MARMuxSel => MARMuxSel,
         MDRMuxSel => MDRMuxSel,
         PCMuxSel  => PCMuxSel,
         RESET_L   => RESET_L,
         RFMuxSel  => RFMuxSel,
         RegWrite  => RegWrite,
         StoreSR   => StoreSR,
         clk       => clk,
         ADDRESS   => ADDRESS,
         CheckN    => CheckN,
         CheckP    => CheckP,
         CheckZ    => CheckZ,
         DATAOUT   => DATAOUT,
         Opcode    => Opcode,
         bit11     => bit11,
         n         => n,
         p         => p,
         z         => z
      );
   I1 : Memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;
